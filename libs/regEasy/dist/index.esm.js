class t{constructor(){this.pattern=""}start(){return this.pattern+="^",this}end(){return this.pattern+="$",this}char(t){return this.pattern+=t,this}oneOf(t){return this.pattern+=`[${t.join("")}]`,this}noneOf(t){return this.pattern+=`[^${t.join("")}]`,this}word(){return this.pattern+="\\w가-힣",this}nonWord(){return this.pattern+="[^\\w가-힣]",this}number(){return this.pattern+="\\d",this}nonNumber(){return this.pattern+="\\D",this}space(){return this.pattern+="\\s",this}nonSpace(){return this.pattern+="\\S",this}exactly(t){return this.pattern+=`{${t}}`,this}between(t=1,r=1/0){return this.pattern+=`{${t},${r}}`,this}atLeast(t){return this.pattern+=`{${t},}`,this}zeroOrMore(){return this.pattern+="*",this}zeroOrOne(){return this.pattern+="?",this}oneOrMore(){return this.pattern+="+",this}build(){if(!this.pattern)throw new Error("Please make the pattern first.");return new RegExp(this.pattern)}replace(t,r){if(!this.pattern)throw new Error("Please build the pattern first.");if(!t||!r)throw new Error("Please input the parameters.");const e=new RegExp(this.pattern,"g");return t.replace(e,r)}match(t){if(!this.pattern)throw new Error("Please build the pattern first.");if(!t)throw new Error("Please input the parameters.");const r=new RegExp(this.pattern,"g");return t.match(r)}test(t){if(!this.pattern)throw new Error("Please build the pattern first.");if(!t)throw new Error("Please input the parameters.");return new RegExp(this.pattern).test(t)}isValid(t){try{return new RegExp(t),!0}catch(t){return!1}}}export{t as default};
//# sourceMappingURL=index.esm.js.map
